# generated by datamodel-codegen:
#   filename:  openapi_spec.yaml
#   timestamp: 2024-10-25T09:43:01+00:00

from __future__ import annotations

from dataclasses import dataclass
from typing import Dict

from common.utils import camelcase_to_snakecase


@dataclass
class ExpectedIncome:
    cpr: str | None = None
    year: int | None = None
    valid_from: str | None = None
    do_expect_a_income: bool | None = None
    capital_income: float | None = None
    education_support_income: float | None = None
    care_fee_income: float | None = None
    alimony_income: float | None = None
    benefits_income: float | None = None
    other_b_income: float | None = None
    gross_business_income: float | None = None
    catch_sale_factory_income: float | None = None
    catch_sale_market_income: float | None = None


@dataclass
class MonthlyIncome:
    """
    Specifies that the type is a data contract and can be serialized and deserialized by
    the DataContractSerializer.
    """

    cpr: str | None = None
    year: int | None = None
    month: int | None = None
    salary_income: float | None = None
    catchsale_income: float | None = None
    public_assistance_income: float | None = None
    alimony_income: float | None = None
    dis_gis_income: float | None = None
    retirement_pension_income: float | None = None
    disability_pension_income: float | None = None
    ignored_benefits_income: float | None = None
    employer_paid_gl_pension_income: float | None = None
    foreign_pension_income: float | None = None
    civil_servant_pension_income: float | None = None
    other_pension_income: float | None = None

    @staticmethod
    def from_api_dict(data: Dict[str, str | int | bool | float]) -> MonthlyIncome:
        return MonthlyIncome(**camelcase_to_snakecase(data))


@dataclass
class TaxInformation:
    cpr: str | None = None
    year: int | None = None
    tax_scope: str | None = None
    start_date: str | None = None
    end_date: str | None = None
    tax_municipality_number: str | None = None
    cpr_municipality_code: str | None = None
    cpr_municipality_name: str | None = None
    region_number: str | None = None
    region_name: str | None = None
    district_name: str | None = None
    paid_b_tax: float | None = None


@dataclass
class ServiceListResponseExpectedIncome:
    """
    Represents a generic class for a service list response containing items of type T.
    For a singular response data object use ServiceResponse.
    """

    data: list[ExpectedIncome] | None = None
    message: str | None = None
    chunk: int | None = None
    chunk_size: int | None = None
    total_chunks: int | None = None
    total_records_in_chunks: int | None = None


@dataclass
class ServiceListResponseMonthlyIncome:
    """
    Represents a generic class for a service list response containing items of type T.
    For a singular response data object use ServiceResponse.
    """

    data: list[MonthlyIncome] | None = None
    message: str | None = None
    chunk: int | None = None
    chunk_size: int | None = None
    total_chunks: int | None = None
    total_records_in_chunks: int | None = None


@dataclass
class ServiceListResponseTaxInformation:
    """
    Represents a generic class for a service list response containing items of type T.
    For a singular response data object use ServiceResponse.
    """

    data: list[TaxInformation] | None = None
    message: str | None = None
    chunk: int | None = None
    chunk_size: int | None = None
    total_chunks: int | None = None
    total_records_in_chunks: int | None = None


@dataclass
class ServiceListResponseString:
    """
    Represents a generic class for a service list response containing items of type T.
    For a singular response data object use ServiceResponse.
    """

    data: list[str] | None = None
    message: str | None = None
    chunk: int | None = None
    chunk_size: int | None = None
    total_chunks: int | None = None
    total_records_in_chunks: int | None = None
