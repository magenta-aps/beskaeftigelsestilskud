# Generated by Django 5.1.3 on 2025-01-20 08:29

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("suila", "0002_alter_joblog_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="U1AEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "u1a_id",
                    models.IntegerField(unique=True, verbose_name="U1A ID i AKAP"),
                ),
                (
                    "name",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        max_length=255,
                        verbose_name="Navn på udfylder",
                    ),
                ),
                (
                    "accounting_firm",
                    models.CharField(max_length=255, verbose_name="Revisionsfirma"),
                ),
                (
                    "company_name",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        max_length=255,
                        verbose_name="Virksomhedsnavn",
                    ),
                ),
                (
                    "cvr",
                    models.CharField(
                        error_messages={
                            "invalid": "error.invalid_cvr",
                            "required": "error.required",
                        },
                        max_length=255,
                        verbose_name="CVR",
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        error_messages={
                            "invalid": "error.invalid_email",
                            "required": "error.required",
                        },
                        max_length=255,
                        verbose_name="Email-adresse",
                    ),
                ),
                (
                    "financial_year",
                    models.IntegerField(verbose_name="Udbyttet vedrører regnskabsåret"),
                ),
                (
                    "u1_filled",
                    models.BooleanField(
                        blank=True,
                        choices=[(None, "---------"), ("0", "No"), ("1", "Yes")],
                        null=True,
                        verbose_name="Har du allerede udfyldt U1?",
                    ),
                ),
                (
                    "dividend",
                    models.DecimalField(
                        decimal_places=2,
                        error_messages={
                            "invalid": "error.number_required",
                            "required": "error.required",
                        },
                        max_digits=12,
                        verbose_name="Udbetalt/godskrevet udbytte i DKK, før skat",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, null=True, verbose_name="Særlige oplysninger"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        max_length=255,
                        verbose_name="By",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        error_messages={
                            "invalid": "error.invalid_date",
                            "required": "error.required",
                        },
                        verbose_name="Dato",
                    ),
                ),
                (
                    "authorized_signatory",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        max_length=255,
                        verbose_name="Navn på underskriftsberettiget for selskabet",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "created_by_cpr",
                    models.CharField(
                        db_index=True,
                        error_messages={"required": "error.required"},
                        verbose_name="Oprettet af CPR",
                    ),
                ),
                (
                    "created_by_cvr",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Oprettet af CVR",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="U1AItemEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "u1a_item_id",
                    models.IntegerField(unique=True, verbose_name="U1AItem ID i AKAP"),
                ),
                (
                    "cpr_cvr_tin",
                    models.CharField(
                        error_messages={
                            "invalid": "error.invalid_cpr_cvr",
                            "required": "error.required",
                        },
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d{8}(\\d{2})?$", "error.invalid_cpr_cvr"
                            )
                        ],
                        verbose_name="CPR-nr / CVR-nr / TIN",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        verbose_name="Navn",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        verbose_name="Adresse",
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        verbose_name="Postnummer",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        error_messages={"required": "error.required"}, verbose_name="By"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        error_messages={"required": "error.required"},
                        verbose_name="Land",
                    ),
                ),
                (
                    "dividend",
                    models.DecimalField(
                        decimal_places=2,
                        error_messages={
                            "invalid": "error.number_required",
                            "required": "error.required",
                        },
                        max_digits=12,
                        verbose_name="Udbetalt/godskrevet udbytte i DKK, før skat",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "u1a_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="u1a_entry",
                        to="suila.u1aentry",
                    ),
                ),
            ],
        ),
    ]
